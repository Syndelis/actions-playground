name: 'Declarative Labeler'
author: 'Brenno Lemos'
description: 'TODO'

inputs:
  github_token:
    description: 'GitHub Token'
    required: true
  
  when_approved_count:
    description: 'TODO'
    default: 0
  
  when_pr_is:
    description: 'TODO'
    choices:
      - draft
      - ready
    default: ready

  when_approved:
    description: 'TODO'
    default: false
  
  then_add_labels:
    description: 'TODO'
    default: ''
  
  then_remove_labels:
    description: 'TODO'
    default: ''
  
  also_reverse:
    description: 'TODO'
    default: false

runs:
  using: composite
  steps:

    - name: Setup | Environment
      shell: bash
      run: |
        echo "PASSING=true" >> "$GITHUB_ENV"
        echo "TRIGGER_SIDE_EFFECTS=false" >> "$GITHUB_ENV"
        echo "SIDE_EFFECT_ADD_LABELS='${{ inputs.then_add_labels }}'" >> "$GITHUB_ENV"
        echo "SIDE_EFFECT_REMOVE_LABELS='${{ inputs.then_remove_labels }}'" >> "$GITHUB_ENV"

    - name: Pre-When | Count Approves
      id: approved-reviews-counter
      if: env.PASSING == 'true' && startsWith(github.event_name, 'pull_request') && inputs.when_approved_count > 0
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        approved_reviews_count=$(gh pr view ${{ github.event.pull_request.number }} \
          --json latestReviews \
          --jq '.latestReviews | [.[] | select(.state == "APPROVED") | .author.login] | unique | length')

        echo "count=$approved_reviews_count" >> "$GITHUB_OUTPUT"

    - name: When | Approved Count
      if: env.PASSING == 'true' && steps.approved-reviews-counter.outputs.count < inputs.when_approved_count
      shell: bash
      run: echo "PASSING=false" >> "$GITHUB_ENV"
    
    - name: When | Approved
      if: env.PASSING == 'true' && github.event_name == 'pull_request_review' && inputs.when_approved == 'true' && github.event.pull_request.approved == false
      shell: bash
      run: echo "PASSING=false" >> "$GITHUB_ENV"
    
    - name: When | PR is Draft
      if: env.PASSING == 'true' && startsWith(github.event_name, 'pull_request') && inputs.when_pr_is == 'draft' && github.event.pull_request.draft == false
      shell: bash
      run: echo "PASSING=false" >> "$GITHUB_ENV"
    
    - name: When | PR is Ready
      if: env.PASSING == 'true' && startsWith(github.event_name, 'pull_request') && inputs.when_pr_is == 'ready' && github.event.pull_request.draft == true
      shell: bash
      run: echo "PASSING=false" >> "$GITHUB_ENV"
    
    - name: Run Reverse | Reverse Side Effects on Condition Fail
      id: reverse-side-effects
      if: env.PASSING == 'false' && inputs.also_reverse == 'true'
      shell: bash
      run: |
        user_requested_add_labels='${{ env.SIDE_EFFECT_ADD_LABELS }}'
        user_requested_remove_labels='${{ env.SIDE_EFFECT_REMOVE_LABELS }}'

        # This is already quoted because of the setup step
        echo "SIDE_EFFECT_ADD_LABELS=$user_requested_remove_labels" >> "$GITHUB_ENV"
        echo "SIDE_EFFECT_REMOVE_LABELS=$user_requested_add_labels" >> "$GITHUB_ENV"

        echo "run-reverse=true" >> "$GITHUB_OUTPUT"

    - name: Enable Side Effects on Success || Enable Side Effects on Reverse Success
      if: env.PASSING == 'true' || steps.reverse-side-effects.outputs.run-reverse == 'true'
      shell: bash
      run: echo "TRIGGER_SIDE_EFFECTS=true" >> "$GITHUB_ENV"

    - name: Then | Add Labels
      if: env.TRIGGER_SIDE_EFFECTS == 'true' && startsWith(github.event_name, 'pull_request') && env.SIDE_EFFECT_ADD_LABELS
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "[Then | Add Labels] DEBUG: (${{ env.SIDE_EFFECT_ADD_LABELS }})"
        
        gh pr --repo '${{ github.repository }}' \
          edit '${{ github.event.pull_request.number }}' \
          --add-label '${{ env.SIDE_EFFECT_ADD_LABELS }}'

    - name: Then | Remove Labels
      if: env.TRIGGER_SIDE_EFFECTS == 'true' && startsWith(github.event_name, 'pull_request') && env.SIDE_EFFECT_REMOVE_LABELS
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        echo "[Then | Remove Labels] DEBUG: (${{ env.SIDE_EFFECT_REMOVE_LABELS }})"

        gh pr --repo '${{ github.repository }}' \
          edit '${{ github.event.pull_request.number }}' \
          --remove-label '${{ env.SIDE_EFFECT_REMOVE_LABELS }}'
